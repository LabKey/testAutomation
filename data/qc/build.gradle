import org.labkey.gradle.task.RunTestSuite
import org.labkey.gradle.util.BuildUtils;

apply plugin: 'java'

dependencies {
  BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getRemoteApiProjectPath(gradle), depVersion: project.labkeyClientApiVersion)
  implementation "commons-logging:commons-logging:${project.commonsLoggingVersion}"
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
  }
}

project.tasks.register('validatorJar', Jar) {
    group = "QC"
    description = "Builds jar for assay validation"

    from sourceSets.main.output
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName.set("validator.jar")
    destinationDirectory = project.projectDir
    manifest {
        attributes 'Implementation-Title': 'Assay Validator Jar',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty("user.name"),
                'Main-Class': 'org.labkey.AssayValidator'
    }
}

project.tasks.register('transformJar', Jar) {
    group = "QC"
    description = "Builds jar for doing assay transforms"

    from sourceSets.main.output
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName.set("transform.jar")
    destinationDirectory = project.projectDir
    manifest {
        attributes 'Implementation-Title': 'Assay Validator Jar',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty("user.name"),
                'Main-Class': 'org.labkey.AssayTransform'
    }
}

project.tasks.register('transformIdentityJar', Jar) {
    group = "QC"
    description = "Builds no-op transform jar for testing assay transforms"

    from sourceSets.main.output
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName.set("transformIdentity.jar")
    destinationDirectory = project.projectDir
    manifest {
        attributes 'Implementation-Title': 'Assay Validator Jar',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty("user.name"),
                'Main-Class': 'org.labkey.AssayTransformIdentity'
    }
}

project.tasks.register('transformWarningJar', Jar) {
    group = "QC"
    description = "Builds jar for doing assay transform warnings"

    from sourceSets.main.output
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName.set("transformWarning.jar")
    destinationDirectory = project.projectDir
    manifest {
        attributes 'Implementation-Title': 'Assay Validator Jar',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty("user.name"),
                'Main-Class': 'org.labkey.AssayTransformWarning'
    }
}

var jarTask = project.tasks.named('jar')

jarTask.configure {
    dependsOn(project.tasks.validatorJar)
    dependsOn(project.tasks.transformJar)
    dependsOn(project.tasks.transformIdentityJar)
    dependsOn(project.tasks.transformWarningJar)
}

project.project(BuildUtils.getTestProjectPath(project.gradle)).tasks.withType(RunTestSuite).configureEach({ t ->
    t.dependsOn(jarTask)
})
