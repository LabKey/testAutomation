<ApiTests xmlns="http://labkey.org/query/xml">    <test name="get schema queries" type="post">
    <url>
        <![CDATA[
                library(Rlabkey)
                s<-getSession(baseUrl=labkey.url.base, folderPath="/%projectName%")
                scobj <- getSchema(s, "lists")
                scobj   # shows available queries
            ]]>
    </url>
    <response>
        <![CDATA[
                Available queries:
                AllTypesCategories
                AllTypes
                AllTypesComments
                AllTypesCategoryGroups
            ]]>
    </response>
</test>
    <test name="get queries" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                labkey.getQueries(labkey.url.base, "/%projectName%", "lists")
            ]]>
        </url>
        <response>
            <![CDATA[
                queryName fieldName
                AllTypesCategoryGroups container
                AllTypesComments container
                AllTypes container
                AllTypesCategories container
            ]]>
        </response>
    </test>
    <test name="ls schemas" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                lsSchemas(getSession(baseUrl=labkey.url.base, "/%projectName%"))
            ]]>
        </url>
        <response>
            <![CDATA[
                announcement
                assay
                auditLog
                core
                exp
                flow
                issues
                lists
                pipeline
                study
                wiki
            ]]>
        </response>
    </test>
    <test name="get schemas" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                labkey.getSchemas(labkey.url.base, "/%projectName%")
            ]]>
        </url>
        <response>
            <![CDATA[
                announcement
                assay
                auditLog
                core
                exp
                flow
                issues
                lists
                pipeline
                study
                wiki
            ]]>
        </response>
    </test>
    <test name="get rows" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                s<-getSession(baseUrl=labkey.url.base, folderPath="/%projectName%")
                scobj <- getSchema(s, "lists")
                lkdata<- getRows(s, scobj$AllTypes)  # shorthand for labkey.selectRows, all the same args apply
                lkdata
            ]]>
        </url>
        <response>
            <![CDATA[
                DisplayFld TextFld IntFld DoubleFld DateTimeFld
                Row 2 Empty Vals
                Inserted from R how its done 98 12.345 2010-03-01
                The quick brown fox jumped over the fence.
                AttachmentFld RequiredText RequiredInt Category
                lots of words for empty 456 EMPTY
                Veni, vidi, vici 0 LOOKUP2
            ]]>
        </response>
    </test>
    <test name="get lookups" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                s<-getSession(baseUrl=labkey.url.base, folderPath="/%projectName%")
                scobj <- getSchema(s, "lists")
                lucols <- getLookups(s, scobj$AllTypes$Category)  # can add fields from related queries
                lucols
            ]]>
        </url>
        <response>
            <![CDATA[
                fieldName caption type key
                Category/TextKey Text Key Text (String)
                Category/Category Category Text (String)
                Category/CategorySort Sort Ordinal Number (Double)
                Category/Group Category Group Text (String)
                Category/EntityId Entity Id Text (String)
                lookup to lists.AllTypesCategoryGroups
            ]]>
        </response>
    </test>
    <test name="get lookups alternate" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                labkey.getLookupDetails(labkey.url.base, "/%projectName%", "lists", "AllTypes", "Category")
            ]]>
        </url>
        <response>
            <![CDATA[
                queryName fieldName caption fieldKey type
                AllTypes Category/container Folder container Text (String)
                AllTypes Category/Category Category Category Text (String)
                AllTypes Category/CategorySort Sort Ordinal CategorySort Number (Double)
                AllTypes Category/Group Category Group Group Text (String)
                AllTypes Category/EntityId Entity Id EntityId Text (String)
                lists GroupName AllTypesCategoryGroups TRUE
            ]]>
        </response>
    </test>
    <test name="get rows with options" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                s<-getSession(baseUrl=labkey.url.base, folderPath="/%projectName%")
                scobj <- getSchema(s, "lists")
                lucols <- getLookups(s, scobj$AllTypes$Category)  # can add fields from related queries
                cols <- c(names(scobj$AllTypes)[10:14], names(lucols)[9:11])
                simpledf <- getRows(s, scobj$AllTypes, colSelect=paste(cols, sep=","), colNameOpt="caption")
                simpledf
            ]]>
        </url>
        <response>
            <![CDATA[
                Text Field Integer Field Double Field DateTime Field Boolean Field
                some text here 99 987.654 2010-02-14 FALSE
                More plane values -34 98123.450 1999-01-01 FALSE
                null NULL NA and na 123 44.330 2002-02-20 FALSE
                how its done 98 12.345 2010-03-01 FALSE
                Category Sort Ordinal Category Group
                Basic functional test 1
                Empty Values Test 4
                2nd level lookup 3
                1 Punctuation
                4 TypeRange
                2nd level lookup 3 BasicTest
            ]]>
        </response>
    </test>
    <test name="get query details" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                labkey.getQueryDetails(labkey.url.base, "/%projectName%", "lists", "AllTypesCategories")
            ]]>
        </url>
        <response>
            <![CDATA[
                queryName fieldName caption fieldKey type
                AllTypesCategories container Folder container Text (String)
                AllTypesCategories Category Category Category Text (String)
                AllTypesCategories CategorySort Sort Ordinal CategorySort Number (Double)
                AllTypesCategories Group Category Group Group Text (String)
                AllTypesCategories EntityId Entity Id EntityId Text (String)
                lists GroupName AllTypesCategoryGroups TRUE
            ]]>
        </response>
    </test>
    <test name="get default view details" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                labkey.getDefaultViewDetails(labkey.url.base, "/%projectName%", "lists", "AllTypesCategories")
            ]]>
        </url>
        <response>
            <![CDATA[
                queryName fieldName caption fieldKey type
                AllTypesCategories TextKey Text Key TextKey Text (String)
                AllTypesCategories Category Category Category Text (String)
                AllTypesCategories CategorySort Sort Ordinal CategorySort Number (Double)
                AllTypesCategories Group Category Group Group Text (String)
                lists GroupName AllTypesCategoryGroups TRUE
            ]]>
        </response>
    </test>
    <test name="insert row failure 1" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                ## insert, update and delete functions
                newrow <- data.frame(
                    DisplayFld="Inserted via Rlabkey"
                    , TextFld="how its done"
                    , IntFld= ""
                    , DoubleFld = 12.345
                    , DateTimeFld = "03/01/2010"
                    , BooleanFld= FALSE
                    , LongTextFld = "Four score and seven years ago"
                    , RequiredText = "I"
                    , Category = "LOOKUP2")

                labkey.insertRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes", toInsert=newrow)
            ]]>
        </url>
        <response>
            <![CDATA[
                HTTP request was unsuccessful. Status code = 400, Error message = Data does not contain required field: RequiredInt
            ]]>
        </response>
    </test>
    <test name="insert row failure 2" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                ## insert, update and delete functions
                newrow <- data.frame(
                    DisplayFld="Inserted via Rlabkey"
                    , TextFld="how its done"
                    , IntFld= "string"
                    , DoubleFld = 12.345
                    , DateTimeFld = "03/01/2010"
                    , BooleanFld= FALSE
                    , LongTextFld = "Four score and seven years ago"
                    , RequiredText = "I"
                    , RequiredInt = 0
                    , Category = "LOOKUP2")

                labkey.insertRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes", toInsert=newrow)
            ]]>
        </url>
        <response>
            <![CDATA[
                HTTP request was unsuccessful. Status code = 400, Error message = Could not convert value 'string' for field 'IntFld'; expected type Integer
            ]]>
        </response>
    </test>
    <test name="insert row" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                ## insert, update and delete functions
                newrow <- data.frame(
                    DisplayFld="Inserted via Rlabkey"
                    , TextFld="how its done"
                    , IntFld= ""
                    , DoubleFld = 12.345
                    , DateTimeFld = "03/01/2010"
                    , BooleanFld= FALSE
                    , LongTextFld = "Four score and seven years ago"
                    , RequiredText = "I"
                    , RequiredInt = 0
                    , Category = "LOOKUP2")

                insertedRow <- labkey.insertRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes", toInsert=newrow)
                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                        , colFilter=makeFilter(c("DisplayFld", "EQUALS", "Inserted via Rlabkey")))
                selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                DisplayName Text Field Integer Field Double Field DateTime Field
                Inserted via Rlabkey how its done NA 12.345 2010-03-01
                Boolean Field Long Text Field Attachment Required Text
                FALSE Four score and seven years ago
                Required Integer Category Lookup
                1 0 LOOKUP2
            ]]>
        </response>
    </test>
    <test name="update row" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                        ,showHidden=TRUE, colFilter=makeFilter(c("DisplayFld", "EQUALS", "Inserted via Rlabkey")))
                updaterow=data.frame(
                    RowId=selectedRow[1, "Row Id"]
                    , DisplayFld="Updated via Rlabkey"
                    , TextFld="how to update"
                    , IntFld= 777)

                updatedRow <- labkey.updateRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes", toUpdate=updaterow)
                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                        , colFilter=makeFilter(c("DisplayFld", "EQUALS", "Updated via Rlabkey")))
                selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                Updated via Rlabkey
            ]]>
        </response>
    </test>
    <test name="lower case makeFilter operator" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                        , colFilter=makeFilter(c("DisplayFld", "equals", "Updated via Rlabkey")))
                selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                Updated via Rlabkey
            ]]>
        </response>
    </test>
    <test name="table search makeFilter operator" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.selectRows(labkey.url.base
                    , folderPath="/%projectName%"
                    , schemaName="lists"
                    , queryName="AllTypes"
                    , colFilter=makeFilter(c("*", "Q", "empty"))
                )
                selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                Row 2 Empty Vals
                row 4 (the n word)
                Row 5 (na)
                Row 6 bad chars
            ]]>
        </response>
    </test>
    <test name="delete row" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                        ,showHidden=TRUE, colFilter=makeFilter(c("DisplayFld", "EQUALS", "Updated via Rlabkey")))
                selectedRow[1,"Row Id"]

                deleterow <- data.frame(RowId=selectedRow[1, "Row Id"])
                labkey.deleteRows(baseUrl=labkey.url.base, folderPath="/%projectName%", schemaName="lists", queryName="AllTypes",  toDelete=deleterow)

                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                        ,showHidden=TRUE, colFilter=makeFilter(c("DisplayFld", "EQUALS", "Updated via Rlabkey")))
            ]]>
        </url>
        <response>
            <![CDATA[
                Empty data frame was returned. Query may be too restrictive.
            ]]>
        </response>
    </test>
    <test name="insert and select with plus sign" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                ## insert row with text containing plus sign
                newrow <- data.frame(
                    DisplayFld="Inserted with plus (+) sign"
                    , RequiredText = "Required"
                    , RequiredInt = 0
                    , stringsAsFactors=FALSE)

                insertedRow <- labkey.insertRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes", toInsert=newrow)

                ## reselect inserted row
                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes"
                    , colFilter=makeFilter(c("DisplayFld", "EQUALS", "Inserted with plus (+) sign")))
                selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                DisplayName Text Field Integer Field Double Field
                Inserted with plus (+) sign <NA> NA NA
                DateTime Field Boolean Field Long Text Field Attachment Required Text
                <NA> NA <NA> <NA> Required
                Required Integer Category Lookup
                0 <NA>
            ]]>
        </response>
    </test>
    <test name="executeSql" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.executeSql(labkey.url.base, folderPath="/%projectName%",schemaName="lists",
                    sql="select DisplayFld, TextFld from AllTypes where DisplayFld = 'Row 1'")
                selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                DisplayName Text Field
                1 Row 1 some text here
            ]]>
        </response>
    </test>
    <test name="ContainerFilter1" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",
                    schemaName="issues", queryName="rlabkeyissues", containerFilter="Current",
                    colSelect=c("Type","Area","Title","Priority","Status", "Milestone"))
                selectedRow
                ]]>
        </url>
        <response>
            <![CDATA[
                 Type Area Title Priority Status Milestone
                1 <NA> <NA> Rlabkey: Issue at the Project level 3 open <NA>
                ]]>
        </response>
    </test>
    <test name="ContainerFilter2" type="post">
        <url>
            <![CDATA[
                     library(Rlabkey)
                 selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",
                     schemaName="issues", queryName="rlabkeyissues", containerFilter="CurrentAndSubfolders", colSort="+IssueId",
                     colSelect=c("Type","Area","Title","Priority","Status", "Milestone"))
                 selectedRow
                 ]]>
        </url>
        <response>
            <![CDATA[
                  Type Area Title Priority Status Milestone
                 1 <NA> <NA> Rlabkey: Issue at the Project level 3 open <NA>
                 2 <NA> <NA> Rlabkey: Issue in the subfolder 3 open <NA>
                 ]]>
        </response>
    </test>
    <test name="ContainerFilter3" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%/RlabkeyTest",
                    schemaName="issues", queryName="rlabkeyissues", containerFilter="Current",
                    colSelect=c("Type","Area","Title","Priority","Status", "Milestone"))
                selectedRow
                ]]>
        </url>
        <response>
            <![CDATA[
                 Type Area Title Priority Status Milestone
                1 <NA> <NA> Rlabkey: Issue in the subfolder 3 open <NA>
                ]]>
        </response>
    </test>
    <test name="ContainerFilter4" type="post">
        <url>
            <![CDATA[
                     library(Rlabkey)
                 selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%/RlabkeyTest",
                     schemaName="issues", queryName="rlabkeyissues", containerFilter="CurrentAndParents", colSort="+IssueId",
                     colSelect=c("Type","Area","Title","Priority","Status", "Milestone"))
                 selectedRow
                 ]]>
        </url>
        <response>
            <![CDATA[
                  Type Area Title Priority Status Milestone
                 1 <NA> <NA> Rlabkey: Issue at the Project level 3 open <NA>
                 2 <NA> <NA> Rlabkey: Issue in the subfolder 3 open <NA>
                 ]]>
        </response>
    </test>
    <test name="ContainerFilter5" type="post">
        <url>
            <![CDATA[
                     library(Rlabkey)
                 selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%/RlabkeyTest",
                     schemaName="issues", queryName="rlabkeyissues", containerFilter="CurrentPlusProject", colSort="+IssueId",
                     colSelect=c("Type","Area","Title","Priority","Status", "Milestone"))
                 selectedRow
                 ]]>
        </url>
        <response>
            <![CDATA[
                  Type Area Title Priority Status Milestone
                 1 <NA> <NA> Rlabkey: Issue at the Project level 3 open <NA>
                 2 <NA> <NA> Rlabkey: Issue in the subfolder 3 open <NA>
                 ]]>
        </response>
    </test>
    <test name="ContainerFilter6" type="post">
        <url>
            <![CDATA[
                     library(Rlabkey)
                 selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",
                     schemaName="issues", queryName="rlabkeyissues",
                     colFilter=makeFilter(c("Title", "STARTS_WITH", "Rlabkey:")),
                     colSort="Title",
                     containerFilter="AllFolders",
                     colSelect=c("Type","Area","Title","Priority","Status", "Milestone"))
                 selectedRow
                 ]]>
        </url>
        <response>
            <![CDATA[
                  Type Area Title Priority Status Milestone
                 1 <NA> <NA> Rlabkey: Issue at the Project level 3 open <NA>
                 2 <NA> <NA> Rlabkey: Issue in another project 3 open <NA>
                 3 <NA> <NA> Rlabkey: Issue in the subfolder 3 open <NA>
                 ]]>
        </response>
    </test>
    <test name="import rows" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                # setup new rows data frame with 10,000 identical rows
                newrows <- data.frame(
                    DisplayFld="Imported from R"
                    , RequiredText="abc"
                    , RequiredInt=1
                    , stringsAsFactors=FALSE)
                newrows = newrows[rep(1:nrow(newrows),each=10000),]

                importedInfo <- labkey.importRows(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes", toImport=newrows)

                print(paste("Rows imported = ", importedInfo$rowsAffected, sep=""))
            ]]>
        </url>
        <response>
            <![CDATA[
                Rows imported = 10000
            ]]>
        </response>
    </test>
    <test name="select with array in response" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                 selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",
                     schemaName="core", queryName="SiteUsers",
                     colSelect=c("UserId", "Groups"))
                 selectedRow
            ]]>
        </url>
        <response>
            <![CDATA[
                  User Id Groups
            ]]>
        </response>
    </test>
    <test name="select with maxRows and rowOffset" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                 selectedRow<-labkey.selectRows(labkey.url.base, folderPath="/%projectName%",
                     schemaName="lists", queryName="AllTypes", colSelect="DisplayFld",
                     maxRows=2, rowOffset=1, method="GET") # TODO: issue 31833: maxRows not respected in selectRows POST
                 selectedRow
                 paste("rows: ", dim(selectedRow)[1], ", cols:", dim(selectedRow)[2], sep="")
            ]]>
        </url>
        <response>
            <![CDATA[
                  DisplayName
                 1 Row 2 Empty Vals
                 2 Row 3 (plain)
                 [1] "rows: 2, cols:1"
             ]]>
        </response>
    </test>
    <test name="truncate table" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                labkey.truncateTable(labkey.url.base, folderPath="/%projectName%",schemaName="lists", queryName="AllTypes")

            ]]>
        </url>
        <response>
            <![CDATA[
                $success
                [1] TRUE
                $schemaName
                [1] "lists"
                $queryName
                [1] "AllTypes"
                $deletedRows
                [1] 10011
            ]]>
        </response>
    </test>
</ApiTests>
