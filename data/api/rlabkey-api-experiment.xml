<ApiTests xmlns="http://labkey.org/query/xml">
    <test name="experiment saveBatch of runs with material inputs and outputs" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                print(m1 <- labkey.experiment.createMaterial(list(name = "87444063.2604.626")))
                print(m2 <- labkey.experiment.createMaterial(list(name = "87444063.2604.625")))
                print(run <- labkey.experiment.createRun(list(name = "new run with materials"), materialInputs = m1, materialOutputs = m2))
                print(labkey.experiment.saveBatch(protocolName=labkey.experiment.SAMPLE_DERIVATION_PROTOCOL, runList=run, baseUrl=labkey.url.base, folderPath="%projectName%"))
            ]]>
        </url>
        <response>
            <![CDATA[
                $batch$created

                $batch$name

                $batch$runs[[1]]$materialInputs[[1]]$name
                [1] "87444063.2604.626"

                $batch$runs[[1]]$materialOutputs[[1]]$name
                [1] "87444063.2604.625"

                $batch$runs[[1]]$name
                [1] "new run with materials"
            ]]>
        </response>
    </test>
    <test name="experiment saveBatch of runs with data inputs and outputs" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                print(d1 <- labkey.experiment.createData(list(pipelinePath = "data.tsv")))
                print(d2 <- labkey.experiment.createData(list(pipelinePath = "result.txt")))
                print(run <- labkey.experiment.createRun(list(name = "new run with datas"), dataInputs = d1, dataOutputs = d2))
                print(labkey.experiment.saveBatch(protocolName=labkey.experiment.SAMPLE_DERIVATION_PROTOCOL, runList=run, baseUrl=labkey.url.base, folderPath="%projectName%"))
            ]]>
        </url>
        <response>
            <![CDATA[
                $batch$created

                $batch$name

                $batch$runs[[1]]$dataOutputs[[1]]$name
                [1] "result.txt"

                $batch$runs[[1]]$dataInputs[[1]]$name
                [1] "data.tsv"

                $batch$runs[[1]]$name
                [1] "new run with datas"
            ]]>
        </response>
    </test>
    <test name="experiment lineage test with default parameters" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                run <- labkey.selectRows(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  schemaName="exp", queryName="Runs", colSelect="LSID",
                  colFilter=makeFilter(c("Name", "EQUAL", "new run with materials")),
                  colNameOpt="rname"
                )

                m1 <- labkey.selectRows(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  schemaName="exp", queryName="Materials", colSelect="LSID",
                  colFilter=makeFilter(c("Name", "EQUAL", "87444063.2604.625")),
                  colNameOpt="rname"
                )

                m2 <- labkey.selectRows(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  schemaName="exp", queryName="Materials", colSelect="LSID",
                  colFilter=makeFilter(c("Name", "EQUAL", "87444063.2604.626")),
                  colNameOpt="rname"
                )

                response = labkey.experiment.lineage(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  lsids=c(run$lsid)
                )

                print(paste("Seed length = ", length(response$seeds), sep=""))
                print(paste("Nodes length = ", length(response$nodes), sep=""))
                print(paste("Name = ", response$nodes[[m1$lsid]]$name, sep=""))
                print(paste("Type = ", response$nodes[[m1$lsid]]$type, sep=""))
                print(paste("Material lineage type = ", response$nodes[[m1$lsid]]$materialLineageType, sep=""))
                print(paste("Name = ", response$nodes[[m2$lsid]]$name, sep=""))
                print(paste("Type = ", response$nodes[[m2$lsid]]$type, sep=""))
                print(paste("Material lineage type = ", response$nodes[[m2$lsid]]$materialLineageType, sep=""))
            ]]>
        </url>
        <response>
            <![CDATA[
                [1] "Seed length = 1"
                [1] "Nodes length = 3"
                [1] "Name = 87444063.2604.625"
                [1] "Type = Material"
                [1] "Material lineage type = Derivative"
                [1] "Name = 87444063.2604.626"
                [1] "Type = Material"
                [1] "Material lineage type = RootMaterial"
            ]]>
        </response>
    </test>
    <test name="experiment lineage test with custom parameters" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)

                run <- labkey.selectRows(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  schemaName="exp", queryName="Runs", colSelect="LSID",
                  colFilter=makeFilter(c("Name", "EQUAL", "new run with materials")),
                  colNameOpt="rname"
                )

                m1 <- labkey.selectRows(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  schemaName="exp", queryName="Materials", colSelect="LSID",
                  colFilter=makeFilter(c("Name", "EQUAL", "87444063.2604.625")),
                  colNameOpt="rname"
                )

                m2 <- labkey.selectRows(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  schemaName="exp", queryName="Materials", colSelect="LSID",
                  colFilter=makeFilter(c("Name", "EQUAL", "87444063.2604.626")),
                  colNameOpt="rname"
                )

                response = labkey.experiment.lineage(
                  baseUrl=labkey.url.base, folderPath="%projectName%",
                  lsids=c(run$lsid),
                  options=list(
                    parents=FALSE,
                    expType="Material",
                    includeProperties=TRUE
                  )
                )

                print(paste("Seed length = ", length(response$seeds), sep=""))
                print(paste("Nodes length = ", length(response$nodes), sep=""))
                print(paste("Name = ", response$nodes[[m1$lsid]]$name, sep=""))
                print(paste("Type = ", response$nodes[[m1$lsid]]$type, sep=""))
                print(paste("Material lineage type = ", response$nodes[[m1$lsid]]$materialLineageType, sep=""))
                print(paste("M2 excluded = ", is.null(response$nodes[[m2$lsid]]$name), sep=""))
            ]]>
        </url>
        <response>
            <![CDATA[
                [1] "Seed length = 1"
                [1] "Nodes length = 2"
                [1] "Name = 87444063.2604.625"
                [1] "Type = Material"
                [1] "Material lineage type = Derivative"
                [1] "M2 excluded = TRUE"
            ]]>
        </response>
    </test>
    <test name="labkey.saveBatch for assay with space in name" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                print(labkey.saveBatch(baseUrl=labkey.url.base, folderPath="%projectName%", "Rlabkey GPAT Test", data.frame(SpecimenID=c(1,2,3))))
            ]]>
        </url>
        <response>
            <![CDATA[
                $batch$runs[[1]]$dataRows[[1]]$SpecimenID
                [1] "1"

                $batch$runs[[1]]$dataRows[[2]]$SpecimenID
                [1] "2"

                $batch$runs[[1]]$dataRows[[3]]$SpecimenID
                [1] "3"

                $batch$runs[[1]]$schemaName
                [1] "assay.General.Rlabkey GPAT Test"
            ]]>
        </response>
    </test>
    <test name="create sample type and load data" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                df <- data.frame(name=c("test1","test2","test3"), customInt=c(1:3), customString=c("aaa", "bbb", "ccc"))
                info <- labkey.domain.createAndLoad(baseUrl=labkey.url.base, folderPath="%projectName%", domainKind="SampleSet", df=df, name="test sample type with load data")
                print(paste("Create successful = ", info$success, sep=""))
                print(paste("Rows via createAndLoad = ", info$rowCount, sep=""))
            ]]>
        </url>
        <response>
            <![CDATA[
                Create successful = TRUE
                Rows via createAndLoad = 3
             ]]>
        </response>
    </test>
    <test name="create data class and load data" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                df <- data.frame(name=c("test1","test2","test3"), customInt=c(1:3), customString=c("aaa", "bbb", "ccc"))
                info <- labkey.domain.createAndLoad(baseUrl=labkey.url.base, folderPath="%projectName%", domainKind="DataClass", df=df, name="test data class with load data")
                print(paste("Create successful = ", info$success, sep=""))
                print(paste("Rows via createAndLoad = ", info$rowCount, sep=""))
            ]]>
        </url>
        <response>
            <![CDATA[
                Create successful = TRUE
                Rows via createAndLoad = 3
             ]]>
        </response>
    </test>
    <test name="insert and merge into sample type" type="post">
        <url>
            <![CDATA[
                library(Rlabkey)
                name <- "test insert and merge into sample type"
                df <- data.frame(name=c("test1","test2","test3"), customInt=c(1:3), customString=c("aaa", "bbb", "ccc"))
                info <- labkey.domain.createAndLoad(baseUrl=labkey.url.base, folderPath="%projectName%", domainKind="SampleSet", df=df, name=name)
                print(paste("Rows via createAndLoad = ", info$rowCount, sep=""))

                # insert via labkey.query.import
                df <- data.frame(name=c("test4","test5"), customInt=c(4:5), customString=c("aaa", "bbb"))
                info <- labkey.query.import(
                    baseUrl=labkey.url.base, folderPath="%projectName%",
                    schemaName="samples", queryName=name, toImport=df
                )
                print(paste("Rows via insert = ", info$rowCount, sep=""))

                # now try labkey.query.import which should fail with duplicate key message
                df <- data.frame(
                    name=c("test1","test2","test3","test4","test5","test6","test7","test8","test9","test10"),
                    customInt=c(101:110)
                )
                info <- labkey.query.import(
                    baseUrl=labkey.url.base, folderPath="%projectName%",
                    schemaName="samples", queryName=name, toImport=df
                )
                print(paste("Error = ", info$exception, sep=""))

                # now merge via labkey.query.import, 5 update and 5 inserts
                df <- data.frame(
                    name=c("test1","test2","test3","test4","test5","test6","test7","test8","test9","test10"),
                    customInt=c(101:110)
                )
                info <- labkey.query.import(
                    baseUrl=labkey.url.base, folderPath="%projectName%",
                    schemaName="samples", queryName=name, toImport=df,
                    options=list(insertOption = "MERGE", auditBehavior = "DETAILED")
                )
                print(paste("Rows via merge = ", info$rowCount, sep=""))
                print(paste("Has audit transaction id = ", !is.na(info$transactionAuditId), sep=""))
            ]]>
        </url>
        <response>
            <![CDATA[
                Rows via createAndLoad = 3
                Rows via insert = 2
                duplicate key
                Rows via merge = 10
                Has audit transaction id = TRUE
             ]]>
        </response>
    </test>
</ApiTests>
