/*
 * Copyright (c) 2012-2019 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.test.tests;

import org.junit.experimental.categories.Category;
import org.labkey.test.BaseWebDriverTest;
import org.labkey.test.Locator;
import org.labkey.test.Locators;
import org.labkey.test.TestFileUtils;
import org.labkey.test.TestTimeoutException;
import org.labkey.test.categories.Charting;
import org.labkey.test.categories.Daily;
import org.labkey.test.categories.Reports;
import org.labkey.test.components.ChartLayoutDialog;
import org.labkey.test.components.ChartTypeDialog;
import org.labkey.test.components.LookAndFeelTimeChart;
import org.labkey.test.components.SaveChartDialog;
import org.labkey.test.pages.TimeChartWizard;
import org.labkey.test.tests.visualization.TimeChartTest;
import org.labkey.test.util.ApiPermissionsHelper;
import org.labkey.test.util.DataRegionTable;
import org.labkey.test.util.Ext4Helper;
import org.labkey.test.util.LogMethod;
import org.labkey.test.util.PortalHelper;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@Category({Daily.class, Reports.class, Charting.class})
@BaseWebDriverTest.ClassTimeout(minutes = 15)
public class TimeChartDateBasedTest extends TimeChartTest
{
    private static final String REPORT_NAME_1 = "TimeChartTest Report";
    private static final String REPORT_NAME_2 = "TimeChartTest 2Report";
    private static final String REPORT_NAME_3 = "TimeChartTest Multi-Measure Report";
    private static final String X_AXIS_LABEL = "New X-Axis Label";
    private static final String X_AXIS_LABEL_MANUAL = "New X-Axis Label Manual";
    private static final String Y_AXIS_LABEL = "New Y-Axis Label";
    private static final String CHART_TITLE = "New Chart Title";
    private static final String PER_GROUP = "One Chart Per Group";
    private static final String REPORT_DESCRIPTION = "This is a report generated by the TimeChartDateBasedTest";
    private static final String VL_MEASURE_LABEL = "Viral Load Quantified (copies/ml)";
    private static final String CD4_MEASURE_LABEL = "CD4+ (cells/mm3)";
    private static final String LYMPHS_MEASURE_LABEL = "Lymphs (cells/mm3)";


    @Override
    @LogMethod protected void doCreateSteps()
    {
        configureStudy();
        _userHelper.createUser(USER1);
        _userHelper.createUser(USER2);

        navigateToFolder(getProjectName(), getFolderName());
        ApiPermissionsHelper permissionsHelper = new ApiPermissionsHelper(this);
        permissionsHelper.setUserPermissions(USER1, "Reader");
        permissionsHelper.setUserPermissions(USER2, "Editor");
        permissionsHelper.setSiteGroupPermissions("Guests", "Reader");

        PortalHelper portalHelper = new PortalHelper(this);
        portalHelper.addWebPart("Views");
        portalHelper.addWebPart("Datasets");
    }

    @Override
    public void doCleanup(boolean afterTest) throws TestTimeoutException
    {
        deleteUsersIfPresent(USER1, USER2);
        super.doCleanup(afterTest);
    }

    @Override
    public void doVerifySteps()
    {
        axisRangeTest();

        createChartTest();

        stdDevRegressionTest(); // relies on createChartTest

        visualizationTest(); // relies on stdDevRegressionTest

        generateChartPerParticipantTest(); // relies on visualizationTest

        saveTest(); // relies on generateChartPerParticipantTest

        timeChartPermissionsTest(); // relies on saveTest

        pointClickFunctionTest(); // relies on saveTest

        multiMeasureTimeChartTest();

        createParticipantGroups();

        participantGroupTimeChartTest(); // relies on createParticipantGroups and multiMeasureTimeChartTest

        multiAxisTimeChartTest(); // relies on participantGroupTimeChartTest

        aggregateTimeChartUITest();  // relies on createParticipantGroups

        filteredTimeChartRegressionTest(); // relies on nothing, wow.
    }

    private static final String SVG_AXIS_X =              "0\n50\n100\n150\n200\n0\n50000\n1e+5\n1.5e+5\n2e+5\n2.5e+5\n3e+5\n3.5e+5\n4e+5\n4.5e+5\n5e+5\n5.5e+5\n6e+5\n6.5e+5\n200\n300\n400\n500\n600\n700\n800\n900\n1000\n1100\n1200\n1300\nHIV Test Results, Lab Results\n249320107\nDays Since Start Date\nViral Load Quantified (copies/ml)\nCD4+ (cells/mm3)\n249320107 CD4+(cells/mm3)\n249320107 Viral LoadQuantified (copies/ml)";
    private static final String SVG_AXIS_X_LEFT =         "0\n50\n100\n150\n200\n2e+5\n2.1e+5\n2.2e+5\n2.3e+5\n2.4e+5\n2.5e+5\n2.6e+5\n2.7e+5\n200\n300\n400\n500\n600\n700\n800\n900\n1000\n1100\n1200\n1300\nHIV Test Results, Lab Results\n249320107\nDays Since Start Date\nViral Load Quantified (copies/ml)\nCD4+ (cells/mm3)\n249320107 CD4+(cells/mm3)\n249320107 Viral LoadQuantified (copies/ml)";
    private static final String SVG_AXIS_X_LEFT_RIGHT =   "0\n50\n100\n150\n200\n2e+5\n2.1e+5\n2.2e+5\n2.3e+5\n2.4e+5\n2.5e+5\n2.6e+5\n2.7e+5\n250\n300\n350\n400\n450\n500\n550\n600\nHIV Test Results, Lab Results\n249320107\nDays Since Start Date\nViral Load Quantified (copies/ml)\nCD4+ (cells/mm3)\n249320107 CD4+(cells/mm3)\n249320107 Viral LoadQuantified (copies/ml)";
    private static final String AXIS_TIME_CHART = "Axis Time Chart";
    @LogMethod private void axisRangeTest()
    {
        TimeChartWizard timeChartWizard;
        ChartTypeDialog chartTypeDialog;
        LookAndFeelTimeChart lookAndFeelDialog;

        goToProjectHome();
        clickFolder(getFolderName());
        chartTypeDialog = clickAddChart("study", "HIV Test Results");
        chartTypeDialog.setChartType(ChartTypeDialog.ChartType.Time)
                .setYAxis(VL_MEASURE_LABEL)
                .clickApply();
        waitForElement(Locator.css("svg text").withText("HIV Test Results"));

        // adding second y-axis measure
        timeChartWizard = new TimeChartWizard(this);
        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.selectStudyQuery("Lab Results")
                .setYAxis(CD4_MEASURE_LABEL, true)
                .clickApply();
        timeChartWizard.verifySvgChart(10, null);
        assertElementPresent(Locator.css("svg text").withText("HIV Test Results, Lab Results"));
        assertElementPresent(Locator.css("svg text").withText(VL_MEASURE_LABEL + ", " + CD4_MEASURE_LABEL));
        // move second measure to right side of chart
        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.setYAxisSide(1, ChartTypeDialog.YAxisSide.Right).clickApply();
        waitForElement(Locator.css("svg text").withText(VL_MEASURE_LABEL)); // left label
        assertElementPresent(Locator.css("svg text").withText(CD4_MEASURE_LABEL)); // right label
        assertElementNotPresent(Locator.css("svg text").withText(VL_MEASURE_LABEL + ", " + CD4_MEASURE_LABEL));

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setChartLayout(LookAndFeelTimeChart.ChartLayoutType.PerParticipant).clickApply();
        waitForElement(Locator.css("svg text").withText("HIV Test Results, Lab Results")); //main title
        assertElementPresent(Locator.css("svg text").withText("249318596")); //subtitle

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setXAxisRangeType(ChartLayoutDialog.RangeType.AutomaticWithinChart).clickApply();
        waitForElement(Locator.css("svg text").withText("HIV Test Results, Lab Results")); //main title
        assertElementPresent(Locator.css("svg text").withText("249320107")); //subtitle
        assertSVG(SVG_AXIS_X, 1);

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisLeftRangeType(ChartLayoutDialog.RangeType.AutomaticWithinChart).clickApply();
        waitForElement(Locator.css("svg text").withText("HIV Test Results, Lab Results")); //main title
        assertElementPresent(Locator.css("svg text").withText("249320107")); //subtitle
        assertSVG(SVG_AXIS_X_LEFT, 1);

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisRightRangeType(ChartLayoutDialog.RangeType.AutomaticWithinChart).clickApply();
        waitForElement(Locator.css("svg text").withText("HIV Test Results, Lab Results"));
        assertElementPresent(Locator.css("svg text").withText("249320107")); //subtitle
        assertSVG(SVG_AXIS_X_LEFT_RIGHT, 1);

        timeChartWizard
                .clickSave()
                .setReportName(AXIS_TIME_CHART)
                .clickSave();
    }

    @LogMethod public void createChartTest()
    {
        ChartTypeDialog chartTypeDialog = clickAddChart("study", "NAbAssay");
        chartTypeDialog.setChartType(ChartTypeDialog.ChartType.Time);

        // TODO remove this or are we going to support search in new Chart Type dialog?
        //log("Test measure search.");
        //Locator.XPathLocator gridRow = Locator.xpath(_extHelper.getExtDialogXPath(ADD_MEASURE_DIALOG) + "//div[contains(@class, 'x4-grid-view')]/table/tbody/tr");
        //WebElement presortRow = gridRow.findElement(getDriver());
        //_extHelper.setExtFormElementByType(ADD_MEASURE_DIALOG, "text", "nab");
        //shortWait().until(ExpectedConditions.stalenessOf(presortRow));
        //// Count search results (11 in study's NAb assay)
        //assertEquals("Wrong number of measures after filter", 11, getElementCount(gridRow));

        log("Check for appropriate message for measure with no data.");
        chartTypeDialog.setYAxis("Cutoff Percentage (3)").clickApply();
        waitForText("No data found for the following measures/dimensions: RunCutoff3");
    }

    // Regression test for "11764: Time Chart Wizard raises QueryParseException on 'StdDev' measure"
    @LogMethod public void stdDevRegressionTest()
    {
        log("StdDev regression check");
        TimeChartWizard timeChartWizard = new TimeChartWizard(this);
        ChartTypeDialog chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.removeYAxis().clickButton("Apply", false);
        waitForElement(Locator.tagWithText("div", "Y Axis (Required)"));
        chartTypeDialog.selectStudyQuery("LuminexAssay").setYAxis("StdDev").clickApply();
        waitForElement(Locator.css("svg text").withText("Days Since Start Date")); // x-axis label
        assertElementPresent(Locator.css("svg text").withText("StdDev")); // left-axis label
        assertElementPresent(Locator.css("svg text").withText("LuminexAssay")); // main title
    }

    @LogMethod public void visualizationTest()
    {
        TimeChartWizard timeChartWizard;
        ChartTypeDialog chartTypeDialog;
        LookAndFeelTimeChart lookAndFeelDialog;

        log("Check visualization");
        timeChartWizard = new TimeChartWizard(this);
        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.removeYAxis().clickButton("Apply", false);
        waitForElement(Locator.tagWithText("div", "Y Axis (Required)"));
        chartTypeDialog.selectStudyQuery("HIV Test Results")
                .setYAxis(VL_MEASURE_LABEL)
                .clickApply();
        waitForElement(Locator.css("svg text").withText("Days Since Start Date")); // x-axis label
        assertElementPresent(Locator.css("svg text").withText(VL_MEASURE_LABEL)); // left-axis label
        assertElementPresent(Locator.css("svg text").withText("HIV Test Results")); // main title
        assertTextNotPresent("No data found");

        DataRegionTable dataRegion = timeChartWizard.clickViewData();
        waitForElement(Locator.paginationText(33));
        _ext4Helper.checkGridRowCheckbox("249325717");
        waitForElement(Locator.paginationText(38));
        _ext4Helper.uncheckGridRowCheckbox("249320127");
        waitForElement(Locator.paginationText(31));

        // verify column headers for date based plotting option
        List<String> expectedColumns = Arrays.asList(
                "Participant ID",
                "Visit Date",
                "Visit",
                "Viral Load Quantified (copies/ml)",
                "Start Date",
                "Days");
        assertEquals("Wrong columns for date-base plotting option", expectedColumns, dataRegion.getColumnLabels());

        log("Test X-Axis default axis label on interval change");
        clickButton("View Chart(s)", 0);
        _ext4Helper.waitForMaskToDisappear();
        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.setTimeInterval("Weeks").clickApply();
        waitForElement(Locator.css("svg text").withText("Weeks Since Start Date")); // x-axis label
        // manually set x-axis label to something other than the default
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setXAxisLabel(X_AXIS_LABEL).clickApply();
        waitForElement(Locator.css("svg text").withText(X_AXIS_LABEL)); // x-axis label
        // label shouldn't change automatically once it has been set manually
        clickButton("Chart Type", 0);
        chartTypeDialog = new ChartTypeDialog(getDriver());
        chartTypeDialog.setTimeInterval("Days").clickApply();
        waitForElement(Locator.css("svg text").withText(X_AXIS_LABEL)); // x-axis label
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.clickXAxisTab();
        assertEquals("Axis label should not change after user edit to default value", X_AXIS_LABEL, lookAndFeelDialog.getXAxisLabel());

        log("Test X-Axis change to manual min/max range");
        lookAndFeelDialog.setXAxisRangeMinMax("15", "40").setXAxisLabel(X_AXIS_LABEL_MANUAL).clickApply();
        verifyAxisValueChanges(new String[] {X_AXIS_LABEL_MANUAL,"15","20","25","30","35","40"}, null);

        log("Test Y-Axis change to manual min/max range");
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisRangeMinMax("200000", "400000")
                .setYAxisLabel(Y_AXIS_LABEL)
                .clickApply();
        verifyAxisValueChanges(new String[] {Y_AXIS_LABEL, "2e+5", "4e+5"}, new String[] {"1.5e+5","5e+5"});
        log("Test Y-Axis change to log scale");
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisRangeMinMax("10000", "1000000")
                .setYAxisScale(ChartLayoutDialog.ScaleType.Log)
                .clickApply();
        verifyAxisValueChanges(new String[] {"1e+5"}, new String[] {"2e+5","4e+5"});
    }

    @LogMethod public void generateChartPerParticipantTest()
    {
        TimeChartWizard timeChartWizard = new TimeChartWizard(this);
        LookAndFeelTimeChart lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setSubjectSelectionType(LookAndFeelTimeChart.SubjectSelectionType.Participants)
                .setChartLayout(LookAndFeelTimeChart.ChartLayoutType.PerParticipant)
                .clickApply();
        waitForCharts(5);
        assertElementPresent(Locator.css("svg text").withText("HIV Test Results"), 5); // main title
        assertElementPresent(Locator.css("svg text").withText("249318596"), 2); // subtitle + legend
        assertElementPresent(Locator.css("svg text").withText("249320107"), 2); // subtitle + legend
        assertElementPresent(Locator.css("svg text").withText("249320489"), 2); // subtitle + legend

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setPlotTitle(CHART_TITLE).clickApply();
        waitForCharts(5);
        assertElementPresent(Locator.css("svg text").containing(CHART_TITLE), 5); // main title

        // re-select participant
        _ext4Helper.checkGridRowCheckbox("249320127");
        waitForCharts(6);
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 6); // main title
        assertElementPresent(Locator.css("svg text").withText("249320127"), 2); // subtitle + legend
    }

    @LogMethod public void saveTest()
    {
        TimeChartWizard chartWizard = new TimeChartWizard(this);
        chartWizard.saveReport(REPORT_NAME_1, REPORT_DESCRIPTION);
        clickButton("Edit");
        waitForCharts(6);
        assertElementPresent(Locator.css("svg text").containing(CHART_TITLE), 6);

        SaveChartDialog saveChartDialog = chartWizard.clickSaveAs();
        saveChartDialog
                .setReportName(REPORT_NAME_2)
                .setReportDescription("This is another report generated by the TimeChartTest")
                .setViewableBy(SaveChartDialog.ViewableBy.onlyMe)
                .clickSave();
        waitForCharts(6);
        assertElementPresent(Locator.css("svg text").containing(CHART_TITLE), 6);

        log("Verify saved report");
        goToManageViews();
        waitForElement(Locator.linkWithText(REPORT_NAME_1));
        assertElementPresent(Locator.linkWithText(REPORT_NAME_2));
        clickReportDetailsLink(REPORT_NAME_1);
        assertTextPresent(REPORT_DESCRIPTION);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForCharts(6);
        assertElementPresent(Locator.css("svg text").containing(CHART_TITLE), 6);
    }

    @LogMethod public void timeChartPermissionsTest()
    {
        pushLocation();
        pushLocation();
        assertElementPresent(Ext4Helper.Locators.ext4Button("Save"));
        assertElementPresent(Ext4Helper.Locators.ext4Button("Save As"));
        log("Check Time Chart Permissions");
        impersonate(USER1);
        popLocation(); // Saved chart
        waitForText(CHART_TITLE);
        assertElementNotPresent(Ext4Helper.Locators.ext4Button("Edit"));
        assertElementNotPresent(Ext4Helper.Locators.ext4Button("Save"));
        assertElementPresent(Ext4Helper.Locators.ext4Button("Save As"));
        clickTab("Clinical and Assay Data");
        assertTextNotPresent(REPORT_NAME_2);
        stopImpersonating();
        signOut();
        popLocation(); // Saved chart
        waitForText(CHART_TITLE);
        assertElementNotPresent(Ext4Helper.Locators.ext4Button("Save"));
        assertElementNotPresent(Ext4Helper.Locators.ext4Button("Save As"));
        simpleSignIn();
    }

    @LogMethod public void pointClickFunctionTest()
    {
        TimeChartWizard timeChartWizard;
        LookAndFeelTimeChart lookAndFeelDialog;

        log("Check Time Chart Point Click Function (Developer Only)");
        navigateToFolder(getProjectName(), getFolderName());
        goToManageViews();
        waitForText(REPORT_NAME_1);
        clickReportDetailsLink(REPORT_NAME_1);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForText(X_AXIS_LABEL_MANUAL);
        // change to the data points are visible again
        timeChartWizard = new TimeChartWizard(this);
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisLabel(Y_AXIS_LABEL)
                .setYAxisRangeType(ChartLayoutDialog.RangeType.AutomaticAcrossCharts)
                .setYAxisScale(ChartLayoutDialog.ScaleType.Linear)
                .setXAxisRangeType(ChartLayoutDialog.RangeType.AutomaticAcrossCharts)
                .clickApply();
        assertEquals("Unexpected number of plot data points", 38, getElementCount(Locator.css("svg g a path")));
        // open the developer panel and verify that it is disabled by default
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.clickDeveloperTab();
        assertElementPresent(Ext4Helper.Locators.ext4Button("Enable"));
        assertElementNotPresent(Ext4Helper.Locators.ext4Button("Disable"));
        // enable the feature and verify that you can switch tabs
        lookAndFeelDialog.clickDeveloperEnable()
                .clickDeveloperHelpTab();
        assertTextPresentInThisOrder("Your code should define a single function", "data:", "columnMap:", "measureInfo:", "clickEvent:");
        lookAndFeelDialog.clickDeveloperSourceTab();
        String fn = lookAndFeelDialog.getDeveloperSourceContent();
        assertTrue("Default point click function not inserted in to editor", fn.startsWith("function (data, columnMap, measureInfo, clickEvent) {"));
        // apply the default point click function
        lookAndFeelDialog.clickApply();
        click(Locator.css("svg g a path"));
        _extHelper.waitForExtDialog("Data Point Information");
        waitAndClick(Ext4Helper.Locators.ext4Button("OK"));
        // open developer panel and test JS function validation
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        String errorMsg = lookAndFeelDialog.clickDeveloperTab()
                .setDeveloperSourceContent("")
                .clickApplyWithError();
        assertEquals("Wrong error message", "Error: the value provided does not begin with a function declaration.", errorMsg);
        errorMsg = lookAndFeelDialog.setDeveloperSourceContent("function(){")
                .clickApplyWithError();
        String expectedError = "Error parsing the function:";
        assertTrue("Did not find expected error message \"" + expectedError + "\". Found: " + errorMsg, errorMsg.contains(expectedError));
        lookAndFeelDialog.disableDeveloperMode();
        assertElementNotPresent(Locators.labkeyError);
        // reset to the default point click function
        lookAndFeelDialog.clickDeveloperEnable();
        // test use-case to navigate to participant page on click
        String function = TestFileUtils.getFileContents(TestFileUtils.getSampleData("api/timeChartPointClickTestFn.js"));
        lookAndFeelDialog.setDeveloperSourceContent(function).clickApply();

        timeChartWizard.reSaveReport();

        pushLocation(); // for impersonation test
        pushLocation(); // for impersonation test

        goToManageViews();
        waitForText(REPORT_NAME_1);
        clickReportDetailsLink(REPORT_NAME_1);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForText(X_AXIS_LABEL_MANUAL);
        clickAndWait(Locator.css("svg a path"), WAIT_FOR_JAVASCRIPT);
        assertTextPresent("Participant - 249318596");

        // verify that only developers can see the options to add point click function
        // USER2 is not yet a developer, so shouldn't have permissions to this feature
        impersonate(USER2);
        popLocation();
        waitForText(X_AXIS_LABEL_MANUAL);
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.clickGeneralTab();
        assertFalse("Expecting developer tab to NOT be visible", lookAndFeelDialog.isDeveloperTabVisible());
        lookAndFeelDialog.clickCancel();
        assertElementNotPresent(Ext4Helper.Locators.ext4Button("Developer"));
        stopImpersonating();
        // give USER2 developer perms and try again
        createSiteDeveloper(USER2);
        impersonate(USER2);
        popLocation();
        waitForText(X_AXIS_LABEL_MANUAL);
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.clickGeneralTab();
        assertTrue("Expecting developer tab to be visible", lookAndFeelDialog.isDeveloperTabVisible());
        lookAndFeelDialog.clickCancel();
        stopImpersonating();
    }

    @LogMethod public void multiMeasureTimeChartTest()
    {
        TimeChartWizard timeChartWizard;
        ChartTypeDialog chartTypeDialog;
        LookAndFeelTimeChart lookAndFeelDialog;

        log("Create multi-measure time chart.");
        navigateToFolder(getProjectName(), getFolderName());
        chartTypeDialog = clickAddChart("study", "Lab Results");
        timeChartWizard = chartTypeDialog.setChartType(ChartTypeDialog.ChartType.Time)
                .setYAxis(CD4_MEASURE_LABEL)
                .clickApply();
        waitForElement(Locator.css("svg text").withText(CD4_MEASURE_LABEL));
        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.setYAxis(LYMPHS_MEASURE_LABEL, true).clickApply();
        waitForElement(Locator.css("svg text").withText("249318596 Lymphs (cells/mm3)"));
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setSubjectSelectionType(LookAndFeelTimeChart.SubjectSelectionType.Participants)
                .setChartLayout(LookAndFeelTimeChart.ChartLayoutType.PerMeasureDimension)
                .clickApply();
        waitForElement(Locator.css("svg text").withText(CD4_MEASURE_LABEL + ", " + LYMPHS_MEASURE_LABEL)); // y-axis default label
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setPlotTitle(CHART_TITLE).clickApply();
        waitForCharts(2);
        assertElementPresent(Locator.css("svg text").containing(CHART_TITLE), 2);

        timeChartWizard.saveReport(REPORT_NAME_3);
        waitForCharts(2);
        assertElementPresent(Locator.css("svg text").containing(CHART_TITLE), 2);

        clickFolder(getFolderName());
        goToManageViews();
        clickReportDetailsLink(REPORT_NAME_3);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForCharts(2);
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 2); // main title
        assertElementPresent(Locator.css("svg text").withText(LYMPHS_MEASURE_LABEL), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText(CD4_MEASURE_LABEL), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText("Days Since Start Date"), 2); // x-axis label
    }

    // This SVG text might change (due to shared axis ranges) if different groups are selected
    private static final String SVG_PARTICIPANTGROUP_SOME = "0\n50\n100\n150\n200\n250\n300\n350\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\nNew Chart Title\nSome Participants\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\n249318596 CD4+ (cells/mm3)\n249318596 Lymphs(cells/mm3)\n249320107 CD4+ (cells/mm3)\n249320107 Lymphs(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_SOME_MODIFIED = "50\n100\n150\n200\n250\n300\n350\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\nNew Chart Title\nSome Participants\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\n249318596 CD4+ (cells/mm3)\n249318596 Lymphs(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_OTHER = "0\n50\n100\n150\n200\n250\n300\n350\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\nNew Chart Title\nOther Participants\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\n249320127 CD4+ (cells/mm3)\n249320127 Lymphs(cells/mm3)\n249320489 CD4+ (cells/mm3)\n249320489 Lymphs(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_YET_MORE = "0\n50\n100\n150\n200\n250\n300\n350\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\nNew Chart Title\nYet More Participants\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\n249320489 CD4+ (cells/mm3)\n249320489 Lymphs(cells/mm3)\n249320897 CD4+ (cells/mm3)\n249320897 Lymphs(cells/mm3)\n249325717 CD4+ (cells/mm3)\n249325717 Lymphs(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_1 = "0\n50\n100\n150\n200\n250\n300\n350\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\nNew Chart Title\nGroup 1: Accute HIV-1\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\n249318596 CD4+ (cells/mm3)\n249318596 Lymphs(cells/mm3)\n249320107 CD4+ (cells/mm3)\n249320107 Lymphs(cells/mm3)\n249320489 CD4+ (cells/mm3)\n249320489 Lymphs(cells/mm3)";
    private static final String SVG_PARTICIPANTGROUP_2 = "0\n50\n100\n150\n200\n250\n300\n350\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\nNew Chart Title\nGroup 2: HIV-1 Negative\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\n249320127 CD4+ (cells/mm3)\n249320127 Lymphs(cells/mm3)\n249320897 CD4+ (cells/mm3)\n249320897 Lymphs(cells/mm3)\n249325717 CD4+ (cells/mm3)\n249325717 Lymphs(cells/mm3)";

    @LogMethod public void participantGroupTimeChartTest()
    {
        TimeChartWizard timeChartWizard;
        LookAndFeelTimeChart lookAndFeelDialog;

        log("Test charting with participant groups");
        clickFolder(getFolderName());
        goToManageViews();
        clickReportDetailsLink(REPORT_NAME_3);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForCharts(2);

        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 2); // main title
        assertElementPresent(Locator.css("svg text").withText(LYMPHS_MEASURE_LABEL), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText(CD4_MEASURE_LABEL), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText("Days Since Start Date"), 2); // x-axis label

        timeChartWizard = new TimeChartWizard(this);
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setSubjectSelectionType(LookAndFeelTimeChart.SubjectSelectionType.Groups)
                .setChartLayout(LookAndFeelTimeChart.ChartLayoutType.PerGroup)
                .checkShowIndividualLines()
                .uncheckShowMean()
                .clickApply();
        waitForText(GROUP1_NAME);
        assertElementPresent(Locator.linkWithText("Manage Groups"));
        _ext4Helper.checkGridRowCheckbox(GROUP3_NAME);

        log("Verify one line per measure per participant. All groups.");
        waitForCharts(5);
        assertSVG(SVG_PARTICIPANTGROUP_1, 0);
        assertSVG(SVG_PARTICIPANTGROUP_2, 1);
        assertSVG(SVG_PARTICIPANTGROUP_SOME, 2);
        assertSVG(SVG_PARTICIPANTGROUP_OTHER, 3);
        assertSVG(SVG_PARTICIPANTGROUP_YET_MORE, 4);

        log("Verify one line per measure per participant. 2/3 groups.");
        // uncheck group 2 (leaving group 1 and 3 checked)
        _ext4Helper.uncheckGridRowCheckbox(GROUP2_NAME);
        waitForCharts(4);
        assertSVG(SVG_PARTICIPANTGROUP_1, 0);
        assertSVG(SVG_PARTICIPANTGROUP_2, 1);
        assertSVG(SVG_PARTICIPANTGROUP_SOME, 2);
        assertSVG(SVG_PARTICIPANTGROUP_YET_MORE, 3);

        timeChartWizard.reSaveReport();

        log("Verify report after modifying participant groups.");
        clickFolder(getFolderName());
        modifyParticipantGroups();
        clickFolder(getFolderName());
        goToManageViews();
        clickReportDetailsLink(REPORT_NAME_3);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForText("One or more of the participant groups originally saved with this chart are not currently visible");
        assertTextNotPresent(GROUP3_NAME);

        waitForText(CHART_TITLE);
        assertTextPresent(CHART_TITLE);//, 1); // One chart per group.

        _ext4Helper.clickParticipantFilterCategory("Cohorts");
        waitForCharts(1);
        assertSVG(SVG_PARTICIPANTGROUP_SOME_MODIFIED);

        log("Verify one line per measure per participant.");
        // re-select group 2
        _ext4Helper.checkGridRowCheckbox(GROUP2_NAME);
        waitForCharts(2);
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 2); // main title
        assertElementPresent(Locator.css("svg text").withText(GROUP1_NAME), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText(GROUP2_NAME), 1); // subtitle

        // uncheck group 1
        _ext4Helper.clickParticipantFilterCategory(GROUP1_NAME);
        waitForCharts(1);
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 1); // main title
        assertElementPresent(Locator.css("svg text").withText(GROUP2_NAME), 1); // subtitle
        assertElementNotPresent(Locator.css("svg text").withText(GROUP1_NAME)); // subtitle

        // reselect cohorts
        _ext4Helper.clickParticipantFilterCategory("Cohorts");
        waitForCharts(3);
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 3); // main title
        assertElementPresent(Locator.css("svg text").withText(GROUP2_NAME), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText("Group 1: Accute HIV-1"), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText("Group 2: HIV-1 Negative"), 1); // subtitle

        timeChartWizard.reSaveReport();

        //Now impersonate another user, make sure only 2 groups show up and warning was given.
        pushLocation();
        impersonate(USER1);
        popLocation(); // Saved Chart with groups.

        waitForCharts(2);
        assertTextPresent("One or more of the participant groups originally saved with this chart are not currently visible.");
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 2); // main title
        assertElementPresent(Locator.css("svg text").withText("Group 1: Accute HIV-1"), 1); // subtitle
        assertElementPresent(Locator.css("svg text").withText("Group 2: HIV-1 Negative"), 1); // subtitle
        assertElementNotPresent(Locator.css("svg text").withText(GROUP2_NAME)); // subtitle
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");
        waitForText("No group selected. Please select at least one group.");
        assertElementNotPresent(Locator.css("svg"));
        assertTextPresent(GROUP1_NAME);
        assertTextNotPresent(GROUP2_NAME, GROUP3_NAME);
        stopImpersonating();
    }

    private static final String SVG_MULTI_MANUAL_1 = "0\n50\n100\n150\n200\n250\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\n12.0\n12.5\n13.0\n13.5\n14.0\n14.5\n15.0\n15.5\n16.0\nNew Chart Title\nOther Participants\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\nHemogoblins\n249320127 CD4+(cells/mm3)\n249320127 Hemoglobin\n249320127 Lymphs(cells/mm3)\n249320489 CD4+(cells/mm3)\n249320489 Hemoglobin\n249320489 Lymphs(cells/mm3)";
    private static final String SVG_MULTI_MANUAL_2 = "0\n50\n100\n150\n200\n250\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\n12.0\n21.0\nNew Chart Title\nOther Participants\nDays Since Start Date\nCD4+ (cells/mm3), Lymphs (cells/mm3)\nHemogoblins\n249320127 CD4+(cells/mm3)\n249320127 Hemoglobin\n249320127 Lymphs(cells/mm3)\n249320489 CD4+(cells/mm3)\n249320489 Hemoglobin\n249320489 Lymphs(cells/mm3)";
    @LogMethod public void multiAxisTimeChartTest()
    {
        TimeChartWizard timeChartWizard;
        ChartTypeDialog chartTypeDialog;
        LookAndFeelTimeChart lookAndFeelDialog;

        navigateToFolder(getProjectName(), getFolderName());
        goToManageViews();
        clickReportDetailsLink(REPORT_NAME_3);
        clickAndWait(Locator.linkContainingText("Edit Report"));
        waitForCharts(3);

        waitForText("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");
        waitForCharts(1);
        assertElementPresent(Locator.css("svg text").withText(CHART_TITLE), 1); // main title
        assertElementPresent(Locator.css("svg text").withText(GROUP2_NAME), 1); // subtitle
        assertElementNotPresent(Locator.css("svg text").withText("Group 1: Accute HIV-1")); // subtitle
        assertElementNotPresent(Locator.css("svg text").withText("Group 2: HIV-1 Negative")); // subtitle

        timeChartWizard = new TimeChartWizard(this);
        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.setYAxis("Hemoglobin", true).clickApply();
        timeChartWizard.verifySvgChart(6, new String[]{GROUP2_PTIDS[0] + " Hemoglobin", GROUP2_PTIDS[1] + " Hemoglobin"});

        chartTypeDialog = timeChartWizard.clickChartTypeButton();
        chartTypeDialog.setYAxisSide(2, ChartTypeDialog.YAxisSide.Right).clickApply();
        timeChartWizard.verifySvgChart(6, new String[]{GROUP2_PTIDS[0] + " Hemoglobin", GROUP2_PTIDS[1] + " Hemoglobin"});
        waitForElement(Locator.css("svg text").withText("Hemoglobin")); // y-axis right label
        waitForElement(Locator.css("svg text").withText("12.0")); // y-axis min range
        waitForElement(Locator.css("svg text").withText("21.0")); // y-axis max range

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisRightRangeMinMax("12", "16")
                .setYAxisRightLabel("Hemogoblins")
                .clickApply();
        assertSVG(SVG_MULTI_MANUAL_1, 0);

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setYAxisRightRangeType(ChartLayoutDialog.RangeType.AutomaticAcrossCharts)
                .setYAxisRightScale(ChartLayoutDialog.ScaleType.Log)
                .clickApply();
        assertSVG(SVG_MULTI_MANUAL_2, 0);

        timeChartWizard.reSaveReport();
    }

    //depends on:  participantGroupTimeChartTest
    @LogMethod public void aggregateTimeChartUITest()
    {
        TimeChartWizard timeChartWizard;
        ChartTypeDialog chartTypeDialog;
        LookAndFeelTimeChart lookAndFeelDialog;

        clickFolder(getFolderName());
        chartTypeDialog = clickAddChart("study", "Lab Results");
        chartTypeDialog.setChartType(ChartTypeDialog.ChartType.Time)
                .setYAxis(CD4_MEASURE_LABEL)
                .clickApply();
        waitForElement(Locator.css("svg text").withText(CD4_MEASURE_LABEL));

        //set to aggregate
        timeChartWizard = new TimeChartWizard(this);
        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.setSubjectSelectionType(LookAndFeelTimeChart.SubjectSelectionType.Groups)
                .setChartLayout(LookAndFeelTimeChart.ChartLayoutType.PerGroup)
                .checkShowIndividualLines()
                .uncheckShowMean()
                .clickApply();

        waitForCharts(4);
        assertElementPresent(Locator.css("svg text").withText("Lab Results"), 4); // main title
        assertElementPresent(Locator.css("svg text").withText(GROUP1_NAME), 1); // subtitle

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.uncheckIndividualLines()
                .checkShowMean()
                .clickApply();
        waitForCharts(4);

        // uncheck all groups
        _ext4Helper.uncheckGridRowCheckbox(GROUP1_NAME);
        _ext4Helper.uncheckGridRowCheckbox(GROUP2_NAME);
        _ext4Helper.uncheckGridRowCheckbox("Group 1: Accute HIV-1");
        _ext4Helper.uncheckGridRowCheckbox("Group 2: HIV-1 Negative");

        waitForElement(Locator.tagWithText("div", "No group selected. Please select at least one group."));
        mouseOver(Locators.headerContainer()); // Dismiss tooltip

        // re-select group 1 and 2
        _ext4Helper.checkGridRowCheckbox(GROUP1_NAME);
        _ext4Helper.checkGridRowCheckbox(GROUP2_NAME);
        waitForCharts(2);

        // Count data points in charts by checking the title attribute of the points ('*' here due to xpath namespace limitations in svgs)
        int elCount = getElementCount(Locator.css("svg a").attributeStartsWith("*|title", " " + GROUP1_NAME + ","));
        assertTrue(elCount == 10 || elCount == 20); // 10 in chart and 10 in thumbnail (chrome seems to count the thumbnail, but firefox does not)
        assertElementPresent(Locator.css("svg a").attributeStartsWith("*|title", " " + GROUP2_NAME + ","), 12);

        lookAndFeelDialog = timeChartWizard.clickChartLayoutButton();
        lookAndFeelDialog.uncheckShowMean()
                .checkShowIndividualLines()
                .setChartLayout(LookAndFeelTimeChart.ChartLayoutType.PerMeasureDimension)
                .clickApply();
        waitForCharts(1);
        assertElementPresent(Locator.css("svg text").withText("Lab Results"), 1); // main title
        assertElementPresent(Locator.css("svg text").withText(CD4_MEASURE_LABEL), 2); // subtitle + y-axis label

        timeChartWizard.saveReport("Aggregate", REPORT_DESCRIPTION);

        clickTab("Clinical and Assay Data");
        waitAndClickAndWait(Locator.linkWithText("Aggregate"));
        waitForCharts(1);
        assertElementPresent(Locator.css("svg text").withText("Lab Results"), 1); // main title
        assertElementPresent(Locator.css("svg text").withText(CD4_MEASURE_LABEL), 2); // subtitle + y-axis label
    }

    /**
     * regression for 15246 : Filtering on a column in the grid before creating time chart causes error
     */
    @LogMethod public void filteredTimeChartRegressionTest()
    {
        log("Test time chart from a filtered grid");

        navigateToFolder(getProjectName(), getFolderName());
        clickAndWait(Locator.linkWithText("Physical Exam"));

        String ptid = "249318596";
        DataRegionTable region = new DataRegionTable("Dataset", getDriver());
        region.setFilter("ParticipantId", "Equals", ptid);
        assertTextPresent(ptid);

        region.createChart();
        ChartTypeDialog chartTypeDialog = new ChartTypeDialog(getDriver());
        TimeChartWizard chartWizard = chartTypeDialog.setChartType(ChartTypeDialog.ChartType.Time)
                .setYAxis("Pulse")
                .clickApply();
        waitForElement(Locator.css("svg text").withText("Days Since Start Date"));
        assertElementPresent(Locator.css("svg text").withText("Pulse"));

        waitAndClick(Locator.xpath("//span[contains(@class, 'x4-header-text') and text()='Base Query Filter']"));
        assertElementPresent(Locator.tagContainingText("li", "ParticipantId ="));
        chartWizard.clickViewData();
        waitForElement(Locator.paginationText(10));

        chartWizard.saveReport("Filtered Time Chart", REPORT_DESCRIPTION);
    }
}
