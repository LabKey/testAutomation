import org.labkey.gradle.task.ModuleDistribution
import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.GroupNames
import org.labkey.gradle.util.ModuleFinder
import org.labkey.gradle.plugin.Distribution
import org.labkey.gradle.plugin.FileModule

apply plugin: 'org.labkey.distribution'

dist.description = "Distribution that includes all modules, for use in the continuous integration LabKey Server instance"

project.task(
        "distribution",
        group: GroupNames.DISTRIBUTION,
        description: "Make a LabKey modules distribution for 'test'",
        type: ModuleDistribution,
        {ModuleDistribution dist ->
            dist.subDirName = "test"
            dist.includeTarGZArchive=true
            dist.extraFileIdentifier='-test'
            dist.versionPrefix='Test'
        }
)

project.task(
        "embeddedDistribution",
        group: GroupNames.DISTRIBUTION,
        description: "Make a LabKey modules distribution for 'test'",
        type: ModuleDistribution,
        {ModuleDistribution dist ->
            dist.subDirName = "test"
            dist.embeddedArchiveType="tar.gz"
            dist.extraFileIdentifier='-test'
            dist.versionPrefix='Test'
        }
)


if (project.hasProperty('inheritedDistPath'))
{
    String inheritedDistPath = project.property('inheritedDistPath')
    project.logger.info("inheriting from distribution ${inheritedDistPath}")
    project.evaluationDependsOn(inheritedDistPath)
    Distribution.inheritDependencies(project, inheritedDistPath)

    String testModulesPath = "${BuildUtils.getTestProjectPath(project.gradle)}:modules"
    String dumbsterModule = "${testModulesPath}:dumbster"
    String simpletestModule = "${testModulesPath}:simpletest"
    String devtoolsModule = BuildUtils.getPlatformModuleProjectPath(project.gradle, "devtools")
    List<String> testModules = [dumbsterModule, simpletestModule, devtoolsModule]
    if (project.hasProperty("inheritedDistIncludeAllTestModules"))
    {
        project.findProject(testModulesPath).subprojects {
            Project testModule -> testModules.add(testModule.path)
        }
    }
    BuildUtils.addModuleDistributionDependencies(project, testModules)

    def split = inheritedDistPath.split(":")
    String inheritedDistName = split[split.length - 1]
    tasks.distribution.subDirName = "test/" + inheritedDistName
    tasks.distribution.versionPrefix = "Test_" + inheritedDistName
    tasks.embeddedDistribution.subDirName = "test/" + inheritedDistName
    tasks.embeddedDistribution.versionPrefix = "Test_" + inheritedDistName
}
else
{
    List pathList = []
    project.rootProject.allprojects.each {
        Project otherProject ->
            if (otherProject != project && ModuleFinder.isPotentialModule(otherProject) && FileModule.shouldDoBuild(otherProject, false))
            {
                project.evaluationDependsOn(otherProject.path)
                if (otherProject.plugins.hasPlugin('org.labkey.module') ||
                    otherProject.plugins.hasPlugin('org.labkey.fileModule') ||
                    otherProject.plugins.hasPlugin('org.labkey.javaModule'))
                    pathList += otherProject.path
            }
    }
    BuildUtils.addModuleDistributionDependencies(project, pathList)
}

